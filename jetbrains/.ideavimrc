"" .ideavimrc - Kenneth Hoff
let mapleader = " "

"" Base Settings
"" =======================================================
""" "Scroll offset": Makes the cursor stay in the middle of the screen when scrolling, by making sure there are 7 lines above and below the cursor
set scrolloff=7

""" Binds the unnamed ("") register to the OS clipboard
"set clipboard+=unnamed

"" Plugins
"" =======================================================

""" "Number": Adds line numbers
set number
""" "Relative Number": Makes the line numbers relative to the current line
set relativenumber
""" "Incremental search": shows the search matches as you type
set incsearch
""" "Show mode": shows the current mode in the bottom right corner | Does not seem to work in Rider
set showmode
""" "Show command": shows the command you are typing in the bottom left corner | Does not seem to work in Rider
set showcmd
""" "Ignore case": makes the search case insensitive
set ignorecase
""" "Smart case": makes the search case sensitive if you use a capital letter
set smartcase
""" "Surround": Adds the ability to surround text with brackets, quotes, etc, by using the 's' key
set surround
""" "Highlighted yank": Highlights the text that was yanked
set highlightedyank
""" "Which key": Adds a popup with all the keybindings after pressing part of a keybinding (e.g. <leader>)
set which-key
""" "Easy motion": Adds the ability to jump around the text with easymotion
set easymotion
""" "Nerd tree": Integration between vim and the integrated file explorer in JetBrains IDEs
set nerdtree
""" Disables the visual bell
set visualbell

"" Plugin Settings
"" ========================================================

" Which-key settings
let g:WhichKey_FontSize = 16
let g:WhichKey_CommandColor = "#41ead4"
let g:WhichKey_PrefixColor = "#f335b2"
let g:WhichKey_SortOrder = "by_key_prefix_first"

let g:WhichKeyDesc_leader = "<leader> Leader key"

let g:WhichKeyDesc_leader = "<leader>x Open file explorer"

let g:WhichKeyDesc_easymotion = "<leader>j Jump with Easymotion"
let g:WhichKeyDesc_easymotion_prefix = "<leader><leader>"

let g:WhichKeyDesc_comment = "<leader>c Comment line"

let g:WhichKeyDesc_fold = "<leader>z Folding"

let g:WhichKeyDesc_fold_all = "<leader>zc Fold all regions"
let g:WhichKeyDesc_unfold_all = "<leader>zo Unfold all regions"

let g:WhichKeyDesc_window = "<leader>w Window splits"
let g:WhichKeyDesc_window_split_vertically = "<leader>wv Split vertically"
let g:WhichKeyDesc_window_split_horizontally = "<leader>wh Split horizontally"
let g:WhichKeyDesc_window_split_unsplit = "<leader>wu Unsplit"
let g:WhichKeyDesc_window_split_move_editor = "<leader>wm Move editor to opposite tab group"

let g:WhichKeyDesc_display = "<leader>d Display options"
let g:WhichKeyDesc_zen_mode = "<leader>dz Toggle Zen mode"
let g:WhichKeyDesc_fullscreen = "<leader>df Toggle full screen"

let g:WhichKeyDesc_action= "<leader>a Actions"
let g:WhichKeyDesc_action_context_menu = "<leader>am Open context menu"
let g:WhichKeyDesc_action_search = "<leader>as Open command modal"

let g:WhichKeyDesc_file_quickLook = "<leader><leader> Recent files"

let g:WhichKeyDesc_file_nav = "<leader>f File navigation"
let g:WhichKeyDesc_file_nav_goto_file = "<leader>ff Go to file"
let g:WhichKeyDesc_file_nav_goto_content = "<leader>fc Search for file content"
let g:WhichKeyDesc_file_nav_show_recent_files = "<leader>fr Show recent files"
let g:WhichKeyDesc_file_nav_show_recent_locations = "<leader>fl Show recent locations"

let g:WhichKeyDesc_close_tab = "<leader>q Close active tab"

let g:WhichKeyDesc_refactoring = "<leader>r Refactoring menu"
let g:WhichKeyDesc_refactoring_rename = "<leader>rn Rename element"
let g:WhichKeyDesc_refactoring_method = "<leader>rm Extract method"
let g:WhichKeyDesc_refactoring_variable = "<leader>rv Introduce variable"
let g:WhichKeyDesc_refactoring_field = "<leader>rf Introduce field"
let g:WhichKeyDesc_refactoring_signature = "<leader>rs Change signature"
let g:WhichKeyDesc_refactoring_all = "<leader>rr Open refactorings list"

let g:WhichKeyDesc_goto = "<leader>g Go to X"
let g:WhichKeyDesc_goto_declaration = "<leader>gd Go to Definition"
let g:WhichKeyDesc_goto_type_declaration = "<leader>gy Go to Type Definition"
let g:WhichKeyDesc_goto_implementation = "<leader>gi Go to Implementation"
let g:WhichKeyDesc_goto_usages = "<leader>gu Go to Usages"
let g:WhichKeyDesc_goto_test = "<leader>gt Go to Test"
let g:WhichKeyDesc_goto_back = "<leader>gb Go Back"
let g:WhichKeyDesc_goto_forward = "<leader>gf Go Forward"

let g:WhichKeyDesc_errors = "<leader>e Error navigation"
let g:WhichKeyDesc_errors_next = "<leader>en Go to next error in solution"
let g:WhichKeyDesc_errors_prev = "<leader>ep Go to previous error in solution"

let g:WhichKeyDesc_project = "<leader>p Project"
let g:WhichKeyDesc_quickdocs = "<leader>pc Show Debug Configurations"
let g:WhichKeyDesc_params_info = "<leader>pi Show Parameter Info"


let g:WhichKeyDesc_unit_testing = "<leader>t Unit Testing"
let g:WhichKeyDesc_unit_testing_quicklist = "<leader>tl Open Unit Test QuickList"
let g:WhichKeyDesc_unit_testing_run_session = "<leader>tr Run all tests in current session"
let g:WhichKeyDesc_unit_testing_open_tool_window = "<leader>to Open Unit Test Tool Window"


"" Key mappings
"" ========================================================

"" General mappings
" Make <C-d> - in `Normal` mode - also center the cursor
nnoremap <C-d> zz<C-d>
" Make <C-u> - in `Normal` mode - also center the cursor
nnoremap <C-u> zz<C-u>
" Make Y act more like C and D (yank to end of line)
nnoremap Y y$

"" Tab navigation
"nnoremap <C-p> gt
"nnoremap <C-y> gT

"" Pane navigation
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <C-k> <C-w>k
nnoremap <C-j> <C-w>j

"" Jump between methods
nmap [[ <Action>(MethodUp)
nmap ]] <Action>(MethodDown)

"" Easy visual indentation
vnoremap < <gv

vnoremap > >gv

"" Popup navigation
imap <C-l> <Action>(EditorDown)
imap <C-h> <Action>(EditorUp)


"" Leader commands
"" ========================================================

"" Comment lines
map <leader>c <action>(CommentByLineComment)

"" Jump around with easymotion
map <leader>j <Plug>(easymotion-s)

"" Folding
map <leader>zc :action CollapseAllRegions<CR>
map <leader>zo :action ExpandAllRegions<CR>

"" Project
map <leader>pi <action>(ParameterInfo)
map <leader>ps <action>(Stop)
map <leader>pr <action>(ChooseDebugConfiguration)
" Manage recent projects
map <leader>pm <action>(ManageRecentProjects)
" Close current project
map <leader>pc <action>(CloseProject)

"" Window splits
map <leader>wv <Action>(SplitVertically)
map <leader>wh <Action>(SplitHorizontally)
map <leader>wu <Action>(Unsplit)
map <leader>wm <Action>(MoveEditorToOppositeTabGroup)

"" Display options
map <leader>dd <action>(ToggleDistractionFreeMode)
map <leader>dz <action>(ToggleZenMode)
map <leader>fs <action>(NewScratchFile)

"" Actions
map <leader>am <action>(ShowIntentionActions)
map <leader>as <action>(SearchEverywhere)

"" File navigation
" Show Current File in Solution Explorer
map <leader>ff :NERDTreeFind<CR>
map <leader>e :NERDTreeFind<CR>
" Open Solution Explorer
map <leader>fo :NERDTree<CR>
" Close Solution Explorer
map <leader>fc :NERDTreeClose<CR>

" Close active tab
map <leader>q <action>(CloseContent)

"" Unit Testing
" Open Unit Test QuickList
map <leader>tl <action>(Rider.UnitTesting.QuickList)
" Run all tests in current Session
map <leader>tr <action>(RiderUnitTestRunCurrentSessionAction)
" Rerun failed tests
map <leader>tf <action>(RiderUnitTestRerunBrokenSplitAction)
" Open Unit Test Tool Window
map <leader>to <action>(RiderUnitTestFocusSessionAction)
" Rerun failed tests
map <leader>tf <action>(RiderUnitTestRerunBrokenSplitAction)

"" Refactoring
map <leader>rn <Action>(RenameElement)
map <leader>rm <Action>(ExtractMethod)
map <leader>rv <Action>(IntroduceVariable)
map <leader>rf <Action>(IntroduceField)
map <leader>ri <Action>(Inline)
map <leader>rs <Action>(ChangeSignature)
map <leader>rr <Action>(Refactorings.QuickListPopupAction)

"" Go to code
nmap <leader>gd <Action>(GotoDeclaration)
nmap <leader>gy <Action>(GotoTypeDeclaration)
nmap <leader>gi <Action>(GotoImplementation)
nmap <leader>gu <Action>(ShowUsages)
nmap <leader>gt <Action>(GotoTest)
nmap <leader>gb <Action>(Back)
nmap <leader>gf <Action>(Forward)
